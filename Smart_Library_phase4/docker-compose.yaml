services:
  # User Service
  user-service:
    build:
      context: ./User_Service
    container_name: user-service
    env_file:
      - ./User_Service/.env
    volumes:
      - ./User_Service:/library/user
    restart: unless-stopped
    depends_on:
      user-db:
        condition: service_healthy
    networks:
      - backend

  user-db:
    image: postgres:15
    container_name: user-db
    env_file:
      - ./user-db.env
    volumes:
      - user_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # Book Service
  book-service:
    build:
      context: ./Book_Service
    container_name: book-service
    env_file:
      - ./Book_Service/.env
    volumes:
      - ./Book_Service:/library/book
    restart: unless-stopped
    depends_on:
      book-db:
        condition: service_healthy
    networks:
      - backend

  book-db:
    image: postgres:15
    container_name: book-db
    env_file:
      - ./book-db.env
    volumes:
      - book_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # Loan Service
  loan-service:
    build:
      context: ./Loan_Service
    container_name: loan-service
    env_file:
      - ./Loan_Service/.env
    volumes:
      - ./Loan_Service:/library/loan
    restart: unless-stopped
    depends_on:
      loan-db:
        condition: service_healthy
    networks:
      - backend

  loan-db:
    image: postgres:15
    container_name: loan-db
    env_file:
      - ./loan-db.env
    volumes:
      - loan_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # NGINX Reverse Proxy
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - user-service
      - book-service
      - loan-service
    networks:
      - backend

volumes:
  user_data:
  book_data:
  loan_data:

networks:
  backend:
    driver: bridge